diff -r df6c1d649319 src/enzo/DrivenFlowInitialize.C
--- a/src/enzo/DrivenFlowInitialize.C	Mon Oct 10 07:30:21 2016 -0400
+++ b/src/enzo/DrivenFlowInitialize.C	Wed Nov 30 15:41:16 2016 -0600
@@ -129,7 +129,7 @@
       return FALSE;
   }
 
-  if ((HydroMethod != MHD_RK) && (HydroMethod != HD_RK) && (HydroMethod != MHD_Li)) {
+  if ((HydroMethod != MHD_RK) && (HydroMethod != HD_RK) && (HydroMethod != MHD_Li) && (HydroMethod != PPM_DirectEuler)) {
       fprintf(stderr,"DrivenFlowInitialize: Only support for MUSCL framework and MHDCT at this point.\n");
       return FALSE;
   }
diff -r df6c1d649319 src/enzo/Grid_AddRandomForcing.C
--- a/src/enzo/Grid_AddRandomForcing.C	Mon Oct 10 07:30:21 2016 -0400
+++ b/src/enzo/Grid_AddRandomForcing.C	Wed Nov 30 15:41:16 2016 -0600
@@ -35,7 +35,7 @@
   float levelNorm = (*norm)*dtFixed/dtTopGrid;
 
   // use original RandomForcing field
-  if (RandomForcing) { 
+  if (RandomForcing && !UseDrivingField) { 
 
     for (dim = 0; dim < GridRank; dim++)
         ForcingField[dim] = RandomForcingField[dim];
@@ -46,7 +46,7 @@
 
   // use StochasticForcing in combination with MHDCT
   // for RK2 based solvers, the forcing happens in the Grid_*SourceTerms.C
-  } else if (UseDrivingField && HydroMethod == MHD_Li) {
+  } else if (UseDrivingField) {
     int Drive1Num, Drive2Num, Drive3Num;
     if (this->IdentifyDrivingFields(Drive1Num, Drive2Num, Drive3Num) == FAIL) {
       printf("grid::AddRandomForcing: canot identify driving fields.\n");
diff -r df6c1d649319 src/enzo/Grid_ComputePressure.C
--- a/src/enzo/Grid_ComputePressure.C	Mon Oct 10 07:30:21 2016 -0400
+++ b/src/enzo/Grid_ComputePressure.C	Wed Nov 30 15:41:16 2016 -0600
@@ -308,6 +308,7 @@
   /* To emulate the opacity limit in turbulent star formation 
      simulations */
   
+  /*
   float Gamma1 = Gamma;
   if ((ProblemType == 60 || ProblemType == 61) && SelfGravity == 1)
 
@@ -315,6 +316,7 @@
       Gamma1 = min(Gamma + (log10(BaryonField[DensNum][i])-8.0)*0.3999/2.5, 1.4);
       pressure[i] *= (Gamma1 - 1.0)/(Gamma - 1.0);
     }
+    */
 
    /* If cosmic rays present, add pressure contribution */
    if( CRModel && IncludeCRs){
diff -r df6c1d649319 src/enzo/Grid_ComputeTimeStep.C
--- a/src/enzo/Grid_ComputeTimeStep.C	Mon Oct 10 07:30:21 2016 -0400
+++ b/src/enzo/Grid_ComputeTimeStep.C	Wed Nov 30 15:41:16 2016 -0600
@@ -165,8 +165,9 @@
 			     BaryonField[Vel3Num], &dtBaryons, &dtViscous);
  
 
+    /*
     if(HydroMethod == MHD_Li){
-      /* 1.5) Calculate minimum dt due to MHD: Maximum Fast MagnetoSonic Shock Speed */
+      // 1.5) Calculate minimum dt due to MHD: Maximum Fast MagnetoSonic Shock Speed
       
       //Cosmos nees this, for some reason.
       if(GridRank < 3 ){
@@ -190,6 +191,7 @@
       dtMHD *= CourantSafetyNumber;
       dtMHD *= afloat;  
     }//if HydroMethod== MHD_Li
+    */
 
     /* Clean up */
  
@@ -263,7 +265,7 @@
 
 
   // MHD
-  if (NumberOfBaryonFields > 0 && HydroMethod == MHD_RK) {
+  if (NumberOfBaryonFields > 0 && UseMHD) {
 
     int DensNum, GENum, TENum, Vel1Num, Vel2Num, Vel3Num, 
       B1Num, B2Num, B3Num, PhiNum;
diff -r df6c1d649319 src/enzo/Grid_FlagCellsToBeRefinedByJeansLength.C
--- a/src/enzo/Grid_FlagCellsToBeRefinedByJeansLength.C	Mon Oct 10 07:30:21 2016 -0400
+++ b/src/enzo/Grid_FlagCellsToBeRefinedByJeansLength.C	Wed Nov 30 15:41:16 2016 -0600
@@ -51,6 +51,26 @@
   int size = 1;
   for (dim = 0; dim < GridRank; dim++)
     size *= GridDimension[dim];
+  int DensNum, GENum, TENum, Vel1Num, Vel2Num, Vel3Num;
+  if (this->IdentifyPhysicalQuantities(DensNum, GENum, Vel1Num, Vel2Num,
+                       Vel3Num, TENum) == FAIL) {
+    ENZO_FAIL("Error in IdentifyPhysicalQuantities.\n");
+  }
+  
+  FLOAT  JLSquared = double(4.0*3.14159*3.14159)/GravitationalConstant; //AK
+  JLSquared /= POW(RefineByJeansLengthSafetyFactor, 2);
+  FLOAT CellWidthSquared = CellWidth[0][0]*CellWidth[0][0];
+  for (i = 0; i < size; i++){
+    if (CellWidthSquared > JLSquared/BaryonField[DensNum][i])
+      FlaggingField[i]++; 
+    }
+  int NumberOfFlaggedCells = 0;
+  for (i = 0; i < size; i++) {
+    FlaggingField[i] = (FlaggingField[i] >= 1)? 1 : 0;
+    NumberOfFlaggedCells += FlaggingField[i];
+  }
+  return NumberOfFlaggedCells;
+#ifdef NO 
  
   /* Compute the temperature field. */
  
@@ -60,7 +80,6 @@
     temperature[i] = 1;
   }
   if (ProblemType != 60 && ProblemType != 61 && (EOSType == 0)) { //AK
-
     if (JeansRefinementColdTemperature > 0.0) {
       for (i = 0; i < size; i++)
 	temperature[i] = JeansRefinementColdTemperature;
@@ -74,11 +93,6 @@
  
   /* Find fields: density, total energy, velocity1-3. */
  
-  int DensNum, GENum, TENum, Vel1Num, Vel2Num, Vel3Num;
-  if (this->IdentifyPhysicalQuantities(DensNum, GENum, Vel1Num, Vel2Num,
-                       Vel3Num, TENum) == FAIL) {
-    ENZO_FAIL("Error in IdentifyPhysicalQuantities.\n");
-  }
  
   /* Get density units. */
  
@@ -96,6 +110,19 @@
   FLOAT JLSquared = (double(Gamma*pi*kboltz/GravConst)/
              (double(DensityUnits)*double(Mu)*double(mh))) /
                 (double(LengthUnits)*double(LengthUnits));
+    JLSquared = double(4.0*3.14159*3.14159)/GravitationalConstant; //AK
+  FLOAT CellWidthSquared = CellWidth[0][0]*CellWidth[0][0];
+  for (i = 0; i < size; i++)
+    {
+      if (EOSType == 0) {
+    if (CellWidthSquared > JLSquared*temperature[i]/BaryonField[DensNum][i]){
+      FlaggingField[i]++; 
+    }
+      }
+      else // isothermal and ploytropic sound speed version
+    if (CellWidthSquared > JLSquared/BaryonField[DensNum][i])
+      FlaggingField[i]++; 
+    }
  
   if (ProblemType == 60 || ProblemType == 61)
     JLSquared = double(4.0*3.14159*3.14159)/GravitationalConstant; //AK
@@ -153,7 +180,7 @@
     FlaggingField[i] = (FlaggingField[i] >= 1)? 1 : 0;
     NumberOfFlaggedCells += FlaggingField[i];
   }
+#endif
  
-  return NumberOfFlaggedCells;
  
 }
diff -r df6c1d649319 src/enzo/Make.mach.tacc-stampede-intel
--- a/src/enzo/Make.mach.tacc-stampede-intel	Mon Oct 10 07:30:21 2016 -0400
+++ b/src/enzo/Make.mach.tacc-stampede-intel	Wed Nov 30 15:41:16 2016 -0600
@@ -147,4 +147,4 @@
 MACH_LIBS         = $(LOCAL_LIBS_HDF5) $(LOCAL_LIBS_MACH) 
 MACH_LIBS_MPI     = $(LOCAL_LIBS_MPI)
 MACH_LIBS_HYPRE   = $(LOCAL_LIBS_HYPRE)
-MACH_LIBS_GRACKLE = $(LOCAL_LIBS_GRACKLE)
\ No newline at end of file
+MACH_LIBS_GRACKLE = $(LOCAL_LIBS_GRACKLE)
diff -r df6c1d649319 src/enzo/TurbulenceSimulationInitialize.C
--- a/src/enzo/TurbulenceSimulationInitialize.C	Mon Oct 10 07:30:21 2016 -0400
+++ b/src/enzo/TurbulenceSimulationInitialize.C	Wed Nov 30 15:41:16 2016 -0600
@@ -243,8 +243,8 @@
     ENZO_FAIL("Missing initial data.\n");
   }
   */
-  if (CellFlaggingMethod[0] != 3)
-      fprintf(stderr, "TurbulenceSimulation: check CellFlaggingMethod.\n");
+//  if (CellFlaggingMethod[0] != 3)
+//      fprintf(stderr, "TurbulenceSimulation: check CellFlaggingMethod.\n");
  
   /* If density(temperature, actually, c^2) is left unset, set it = 1. */
  
diff -r df6c1d649319 src/performance_tools/performance_tools.py
--- a/src/performance_tools/performance_tools.py	Mon Oct 10 07:30:21 2016 -0400
+++ b/src/performance_tools/performance_tools.py	Wed Nov 30 15:41:16 2016 -0600
@@ -1003,9 +1003,12 @@
     parser.add_option("-s","--smooth",dest="nsmooth",type='int',
                       default=0,
                       help="Set number of cycles over which to smooth (odd)")
+    parser.add_option("-p","--prefix",dest="prefix",type='str',default='p',help="Prefix for output")
+
     (opts, args) = parser.parse_args()
     if len(args) != 1:
         parser.error("incorrect number of arguments")
+    format = 'pdf'
     filename = args[0]
 
     ### Build a perform object from the data and generate some default plots.
@@ -1018,7 +1021,7 @@
     ### minimum and maximum time taken on a processor for each of these 
     ### quantities.
     p.plot_quantity('Total', 'Mean Time', y_field_axis_label="Mean Time (sec)", 
-                    repeated_field="Level", filename='p1.png',
+                    repeated_field="Level", filename='%s1.%s'%(opts.prefix,format),
                     smooth_len=opts.nsmooth, bounds='minmax')
 
     ### Plot the mean time taken per processor on each level and on the 
@@ -1027,13 +1030,13 @@
     ### quantities.  Scale everything to be as a fraction of the total 
     ### time taken.
     p.plot_quantity('Total', 'Mean Time', y_field_axis_label="Mean Time (sec)", 
-                    repeated_field="Level", filename='p2.png',
+                    repeated_field="Level", filename='%s2.%s'%(opts.prefix,format),
                     smooth_len=opts.nsmooth, bounds='minmax', fractional=True)
 
     ### Plot the mean time taken per processor on each level.  Stack each 
     ### level on the previous layer cumulatively.  
     p.plot_stack([], 'Mean Time', y_field_axis_label="Mean Time (sec)", 
-                 repeated_field="Level", filename='p3.png', 
+                 repeated_field="Level", filename='%s3.%s'%(opts.prefix,format), 
                  smooth_len=opts.nsmooth)
 
     ### Plot the mean time taken per processor performing the RebuildHiearchy
@@ -1041,29 +1044,29 @@
     ### layer cumulatively.  Scale everything to be as a fraction of the
     ### total time taken.
     p.plot_stack([], 'Mean Time', y_field_axis_label="Mean Time", 
-                 repeated_field="Non-Level", filename='p4.png', 
+                 repeated_field="Non-Level", filename='%s4.%s'%(opts.prefix,format), 
                  smooth_len=opts.nsmooth, fractional=True, ylim=[0.0,1.0])
 
     ### Plot the number of cell updates generated at each level and stack them
     ### cumulatively.
     p.plot_stack([], 'Cell Updates', y_field_axis_label='Number of Cell Updates', 
-                 repeated_field="Level", filename='p5.png', 
+                 repeated_field="Level", filename='%s5.%s'%(opts.prefix,format), 
                  smooth_len=opts.nsmooth)
 
     ### Plot the efficiency (updates/processor/sec) for each level and for
     ### the simulation as a whole versus time.
     p.plot_quantity(['Total'], 'Updates/processor/sec', 
                     y_field_axis_label='Efficiency (cell updates/sec/processor)', 
-                    repeated_field='Level', filename='p6.png', 
+                    repeated_field='Level', filename='%s6.%s'%(opts.prefix,format), 
                     smooth_len=opts.nsmooth)
 
     ### Plot the load balancing (Max Time - Min Time) for all subprocesses 
     ### and levels of the simulation as a whole versus time.  
-    p.plot_maxmin([], repeated_field="All", filename='p7.png', fractional=False,
+    p.plot_maxmin([], repeated_field="All", filename='%s7.%s'%(opts.prefix,format), fractional=False,
                   smooth_len=opts.nsmooth)
 
     ### Plot the load balancing (Max Time - Min Time) for all subprocesses 
     ### and levels of the simulation as a whole versus time.  Normalize them 
     ### by the mean time taken for each process.
-    p.plot_maxmin([], repeated_field="All", filename='p8.png', fractional=True,
+    p.plot_maxmin([], repeated_field="All", filename='%s8.%s'%(opts.prefix,format), fractional=True,
                   smooth_len=opts.nsmooth)

